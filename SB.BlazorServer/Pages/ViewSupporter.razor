@page "/ViewSupporter/{Id:int}"
@using SB.BlazorServer.Data.Supporter
@using SB.BlazorServer.Data.Models
@inject SupporterService Service
@inject NavigationManager NavigationManager

<PageTitle>SupportBuddy - Supporter #@Id</PageTitle>

<h1>View Supporter</h1>

@if (currentSupporter == null)
{
    <ShowLoadingComponent />
}
else
{
    @if (currentSupporter.Id == null || currentSupporter.Id <= 0)
    {
        <EntityNotFound EntityName="ticket" />
    }
    else
    {
        <div class="row">
            <div class="col-12 col-md-2 mb-3 order-1 order-md-1">
                <div class="card">
                    <div class="card-header">
                        <strong>@currentSupporter.FirstName @currentSupporter.LastName</strong>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item"><strong>Username:</strong> @currentSupporter.Username</li>
                            <li class="list-group-item"><strong>E-mail:</strong> @currentSupporter.Email</li>
                            <li class="list-group-item"><strong>Phone:</strong> @currentSupporter.PhoneNumber</li>
                        </ul>
                    </div>
                    <div class="card-footer">
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-2 mb-3 order-2 order-md-3">
                <div class="card">
                    <div class="card-header">
                        <strong>Actions</strong>
                    </div>
                    <div class="card-body">
                        <button @onclick="@(async () => await DeleteSupporter())" class="btn btn-danger w-100">Delete supporter</button>
                    </div>
                    <div class="card-footer"></div>
                </div>
            </div>
        </div>
        <hr />
    }
}

@code {
    [Parameter]
    public int Id { get; set; }
    
    private Supporter? currentSupporter;

    private string? NewAnswer;

    
    protected override async Task OnInitializedAsync()
    {
        await LoadSupporter();
    }

    private async Task LoadSupporter()
    {
        currentSupporter = await Service.GetSupporterAsync(Id);
    }
    
    private async Task DeleteSupporter()
    {
        var returnObj = await Service.DeleteSupporterAsync(Id);
        if (returnObj != null && returnObj.Id == Id)
        {
            NavigationManager.NavigateTo("/alltickets");
        }
    }
}