@page "/ViewTicket/{Id:int}"
@using SB.BlazorServer.Data.Ticket
@using SB.BlazorServer.Data.Models
@using SB.BlazorServer.Data.Attachment
@inject TicketService Service
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject AttachmentService AttachmentService

<PageTitle>SupportBuddy - Ticket #@Id</PageTitle>

<h1>Ticket #@Id</h1>

@if (currentTicket == null)
{
    <ShowLoadingComponent />
}
else
{
    @if (currentTicket.Id == null || currentTicket.Id <= 0)
    {
        <EntityNotFound EntityName="ticket" />
    }
    else
    {
        <div class="row">
            <div class="col-12 col-md-2 mb-3 order-1 order-md-1">
                <div class="card">
                    <div class="card-header">
                        <strong>@currentTicket.FirstName @currentTicket.LastName</strong>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item"><strong>E-mail:</strong> @currentTicket.Email</li>
                            <li class="list-group-item"><strong>Phone:</strong> @currentTicket.PhoneNumber</li>
                            <li class="list-group-item"><strong>Ticket Status:</strong> @currentTicket.Status</li>
                        </ul>
                    </div>
                    <div class="card-footer">
                    </div>
                </div>
            </div>
            
            <div class="col-12 col-md-8 mb-3 order-3 order-md-2">
                <div class="card">
                    <div class="card-header">
                        <strong>@currentTicket.Subject</strong>
                    </div>
                    <div class="card-body">
                        <p>
                            @currentTicket.Message
                        </p>
                    </div>
                    <div class="card-footer">
                        <small>Created: @currentTicket.TimeStamp</small>
                    </div>
                </div>
            </div>
            
            <div class="col-12 col-md-2 mb-3 order-2 order-md-3">
                <div class="card">
                    <div class="card-header">
                        <strong>Actions</strong>
                    </div>
                    <div class="card-body">
                        <button disabled="@DisableButtons" @onclick="SwitchView" class="btn btn-primary w-100 mb-3">Add answer</button>
                        <button disabled="@DisableButtons" @onclick="@(async () => await CloseTicket())"class="btn btn-warning w-100 mb-3">Close ticket</button>
                        <button disabled="@(!DisableButtons)" @onclick="@(async () => await DeleteTicket())" class="btn btn-danger w-100">Delete ticket</button>
                    </div>
                    <div class="card-footer"></div>
                </div>
            </div>
        </div>
        
        <hr />
        
        <div class="row mb-5">
            <div class="col-12">
                <h4>Answers</h4>
                @foreach (var answer in currentTicket.Answers)
                {
                    <div class="card mb-3">
                        <div class="card-header">
                            @answer.AuthorFirstName @answer.AuthorLastName answered:
                        </div>
                        <div class="card-body">
                            @answer.Message
                        </div>
                        <div class="card-footer">
                            <div class="row">
                                <div class="col-6">
                                    <small>@answer.TimeStamp</small>
                                </div>
                                <div class="col-6">
                                    @if (@answer.AttachmentUrl != null && @answer.AttachmentUrl.Length > 0)
                                    {
                                        <small><a href="@answer.AttachmentUrl">View Attachment</a></small>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
        
        <div id="pageOverlay" class="@OverlayCssClass">
            <div id="bottomActionbar" class="bg-light text-center pt-4 px-3">
                <div class="row">
                    <div class="col">
                        <h2>Add answer</h2>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-12 col-md-2"></div>
                    <div class="col-12 col-md-8 px-4">
                        <textarea @bind="NewAnswer" class="form-control" rows="4" placeholder="Enter answer here..."></textarea>
                    </div>
                    <div class="col-12 col-md-2"></div>
                </div>
                <div class="row mb-3">
                    <div class="col-12 col-md-2"></div>
                    <div class="col-12 col-md-8 px-4">
                        <div class="accordion accordion-flush border-dark" id="attachmentAccordion">
                            <div class="accordion-item">
                                <h2 class="accordion-header" id="accordHeaderOne">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#accordCollapseOne" aria-expanded="false" aria-controls="accordCollapseOne">
                                        Add an attachment
                                    </button>
                                </h2>
                                <div id="accordCollapseOne" class="accordion-collapse collapse" aria-labelledby="accordHeaderOne" data-bs-parent="#attachmentAccordion">
                                    <div class="accordion-body">
                                        <div class="row">
                                            <div class="col-12 col-md-8">
                                                <InputFile @key="AttachmentFileField" OnChange="OnInputFileChange" class="form-control" />
                                            </div>
                                            <div class="col-12 col-md-2">
                                                <button @onclick="@(async () => await UploadAttachment())" class="btn @AttachmentButtonClass w-100" disabled="@AttachmentButtonDisabled">@AttachmentButtonText</button>
                                            </div>
                                            <div class="col-12 col-md-2">
                                                <button @onclick="RemoveAttachment" class="btn btn-danger w-100" disabled="@AttachmentRemoveButtonDisabled">Remove</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-12 col-md-2"></div>
                </div>
                <div class="row">
                    <div class="col-12 col-md-2"></div>
                    <div class="col-6 col-md-4 px-4">
                        <button class="btn btn-primary w-100" @onclick="@(async () => await SaveAnswer())">Save Answer</button>
                    </div>
                    <div class="col-6 col-md-4 px-4">
                        <button class="btn btn-danger w-100" @onclick="SwitchView">Cancel</button>
                    </div>
                    <div class="col-12 col-md-2"></div>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Ticket? currentTicket;

    private string? NewAnswer;
    private bool hidePopupMenu = true;
    private string? OverlayCssClass => hidePopupMenu ? "hideElement" : null;

    private bool DisableButtons => (currentTicket != null && currentTicket.Status == "Closed");

    private string AttachmentButtonText = "Upload";
    private bool AttachmentButtonDisabled = false;
    private bool AttachmentRemoveButtonDisabled = true;
    private string AttachmentButtonClass = "btn-primary";
    private string? AttachmentFileField;
    private byte[] FileContent;
    private string fileName;

    private int UploadedAttachmentId = -1;
    
    protected override async Task OnInitializedAsync()
    {
        AttachmentButtonClass = AttachmentButtonDisabled ? "btn-success" : "btn-primary";
        await LoadTicket();
    }

    private async Task LoadTicket()
    {
        currentTicket = await Service.GetTicketAsync(Id);
    }
    
    private async Task SwitchView()
    {
        hidePopupMenu = !hidePopupMenu;
        NewAnswer = null;
    }

    private async Task SaveAnswer()
    {
        if (!string.IsNullOrWhiteSpace(NewAnswer))
        {
            var newEntity = new AddAnswer
            {
                Message = NewAnswer
            };

            if (UploadedAttachmentId > 0)
            {
                newEntity.AttachmentId = UploadedAttachmentId;
            }

            var returnObj = await Service.AddAnswerAsync(Id, newEntity);
            if (returnObj != null && returnObj.Id == Id)
            {
                await LoadTicket();
                await SwitchView();

                await JsRuntime.InvokeVoidAsync("ScrollToBottom");
            }
        }
    }

    private async Task CloseTicket()
    {
        var returnObj = await Service.CloseTicketAsync(Id);
        if (returnObj != null && returnObj.Id == Id)
        {
            await LoadTicket();
        }
    }

    private async Task DeleteTicket()
    {
        var returnObj = await Service.DeleteTicketAsync(Id);
        if (returnObj != null && returnObj.Id == Id)
        {
            NavigationManager.NavigateTo("/alltickets");
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs obj)
    {
        long maxFileSize = 5000000;
        await Task.Delay(1);

        var buffer = new byte[obj.File.Size];
        var fileContent = new StreamContent(obj.File.OpenReadStream(maxFileSize));
        buffer = await fileContent.ReadAsByteArrayAsync();

        FileContent = buffer;
        fileName = obj.File.Name;
        StateHasChanged();
    }

    private void RemoveAttachment()
    {
        UploadedAttachmentId = -1;
        AttachmentFileField = null;
        ResetAttachmentButtons();
    }

    private async Task UploadAttachment()
    {
        AttachmentButtonText = "Uploading...";
        AttachmentButtonDisabled = true;
        
        using var content = new MultipartFormDataContent();
        content.Add(content: new ByteArrayContent(FileContent),name: "\"file\"",fileName:fileName);
        var returnContent = await AttachmentService.UploadFileAsync(content);

        if (returnContent != null && returnContent.Id > 0)
        {
            UploadedAttachmentId = returnContent.Id;
            AttachmentButtonText = "Uploaded!";
            AttachmentButtonClass = "btn-success";
            AttachmentRemoveButtonDisabled = false;

            return;
        }

        AttachmentButtonText = "Failed!";
        await Task.Delay(2500);
        
        ResetAttachmentButtons();
    }

    private void ResetAttachmentButtons()
    {
        AttachmentButtonClass = "btn-primary";
        AttachmentButtonDisabled = false;
        AttachmentButtonText = "Upload";
        AttachmentRemoveButtonDisabled = true;
    }
}