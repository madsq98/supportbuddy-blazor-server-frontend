@page "/ViewLiveChat/{Id:int}"
@using SB.BlazorServer.Data.LiveChat
@using SB.BlazorServer.Data.Models
@using System.Net.WebSockets
@using System.Text
@using System.Threading
@using SB.BlazorServer.Data.Auth
@implements IDisposable
@inject LiveChatService Service
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>SupportBuddy - Live Chat #@Id</PageTitle>

<h1>Live Chat #@Id</h1>
<p>Websocket State: @_webSocket.State</p>

@if (currentEntity == null)
{
    <ShowLoadingComponent />
}
else
{
    @if (currentEntity.Id == null || currentEntity.Id <= 0)
    {
        <EntityNotFound EntityName="LiveChat" />
    }
    else
    {
        <div class="row">
            <div class="col-12 col-md-3">
                <!-- author information -->
                
                <div class="card">
                    <div class="card-header">
                        <strong>@currentEntity.FirstName @currentEntity.LastName</strong>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item"><strong>E-mail:</strong> @currentEntity.Email</li>
                            <li class="list-group-item"><strong>Phone:</strong> @currentEntity.PhoneNumber</li>
                            <li class="list-group-item"><strong>Chat Status:</strong> @currentEntity.Status</li>
                        </ul>
                    </div>
                    <div class="card-footer">
                    </div>
                </div>
            </div>
            <div class="col-12 col-md-9">
                <!-- send message field -->
                <div class="row">
                    <div class="col-10">
                        <input @bind="newMessage" type="text" class="form-control form-control-lg" placeholder="Type your message here..." />
                    </div>
                    <div class="col-2">
                        <button @onclick="SendMessageAsync" class="btn btn-lg btn-primary w-100">Send</button>
                    </div>
                </div>
                
                <hr />
                
                @foreach (var msg in currentEntity.Messages)
                {
                    <div class="card mb-3">
                        <div class="card-header">@msg.FirstName @msg.LastName answered:</div>
                        <div class="card-body">
                            @msg.Message
                        </div>
                        <div class="card-footer">
                            <small>@msg.Timestamp</small>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    private LiveChat? currentEntity;

    private string? newMessage;

    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    ClientWebSocket _webSocket = new ClientWebSocket();

    protected override async Task OnInitializedAsync()
    {
        await LoadEntity();

        _webSocket.Options.SetRequestHeader("Authorization", "Basic " + AuthService.AuthString);
        
        await _webSocket.ConnectAsync(new Uri("ws://vps.qvistgaard.me:8980/ws/" + Id), disposalTokenSource.Token);
        _ = ReceieveLoop();
    }

    private async Task LoadEntity()
    {
        currentEntity = await Service.GetLiveChatAsync(Id);
        currentEntity.Messages = currentEntity.Messages.Reverse().ToList();
    }

    private async Task SendMessageAsync()
    {
        if (string.IsNullOrWhiteSpace(newMessage))
            return;
        
        var dataToSend = new ArraySegment<byte>(Encoding.Default.GetBytes(newMessage));
        await _webSocket.SendAsync(dataToSend, WebSocketMessageType.Text, true, disposalTokenSource.Token);
    }

    private async Task ReceieveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[1024]);
        while (!disposalTokenSource.IsCancellationRequested)
        {
            var received = await _webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
            var receivedAsText = Encoding.Default.GetString(buffer.Array, 0, received.Count);

            await LoadEntity();
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        disposalTokenSource.Cancel();
        _ = _webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Leaving", CancellationToken.None);
    }
}